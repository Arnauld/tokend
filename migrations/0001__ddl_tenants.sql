--
--
-- TENANT
--
--

-- tag::tenant[]
CREATE TABLE IF NOT EXISTS tenants (
                                        id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY,
                                        code TEXT   NOT NULL UNIQUE
);

CALL add_delete_meta('tenants');
CALL add_set_delete_fields_trigger('tenants');
CREATE UNIQUE INDEX tenant_code_uniqueness ON tenants (UPPER(code)) where deleted_at is null;

-- end::tenant[]

-- tag::add_tenant_meta[]
CREATE OR REPLACE PROCEDURE add_tenant_meta(table_name text)
     LANGUAGE plpgsql AS
$proc$
BEGIN
     EXECUTE format('ALTER TABLE %I ADD COLUMN tenant_id BIGINT NOT NULL REFERENCES tenants (id) ON DELETE RESTRICT', table_name);
END
$proc$;
-- end::add_tenant_meta[]

-- tag::current_tenant[]
CREATE OR REPLACE function get_current_tenant_id() RETURNS BIGINT
AS
$proc$
DECLARE
     current_tenant_id text;
BEGIN
     current_tenant_id = current_setting('var.tenant_id', true);

     IF (current_tenant_id is null OR current_tenant_id = '') THEN
          RAISE EXCEPTION 'Tenant is mandatory' USING ERRCODE = '23T01';
     END IF;

     return current_tenant_id::bigint;
END
$proc$
     LANGUAGE plpgsql;
-- end::current_tenant[]

-- tag::tenant_trigger[]
CREATE OR REPLACE FUNCTION tenant_trigger_func()
     RETURNS trigger AS $body$
BEGIN
     IF (TG_OP = 'INSERT') THEN
          NEW.tenant_id = get_current_tenant_id();
     END IF;

     IF (TG_OP = 'UPDATE' AND OLD.tenant_id != NEW.tenant_id) THEN
          RAISE EXCEPTION 'Tenant cannot be changed';
     END IF;

     RETURN NEW;
END;
$body$
     LANGUAGE plpgsql;


CREATE OR REPLACE PROCEDURE add_tenant_trigger(table_name text)
     LANGUAGE plpgsql AS
$proc$
BEGIN
     EXECUTE format('CREATE TRIGGER %1$I_tenant_trigger'
                         ' BEFORE INSERT OR UPDATE ON %1$I'
                         ' FOR EACH ROW EXECUTE FUNCTION tenant_trigger_func()',
                    table_name);
END
$proc$;
-- end::tenant_trigger[]

-- tag::tenant_isolation[]
CREATE OR REPLACE PROCEDURE add_tenant_isolation(table_name text)
     LANGUAGE plpgsql AS
$proc$
BEGIN
     EXECUTE format('CREATE POLICY tenant_isolation_policy'
                         ' ON %I'
                         ' USING'
                         ' (tenant_id = get_current_tenant_id())'
                         ' WITH CHECK '
                         ' (tenant_id = get_current_tenant_id());', table_name);
     EXECUTE format('ALTER TABLE %I ENABLE ROW LEVEL SECURITY;', table_name);
END
$proc$;
-- end::tenant_isolation[]

-- tag::fk_tenant_isolation[]
CREATE TYPE fk_type AS (
                            table_name TEXT,
                            column_name TEXT,
                            is_null     BOOLEAN
                       );

CREATE or replace FUNCTION get_owner_tenant_id(table_name text, value bigint) RETURNS bigint AS $body$
DECLARE
     valid_tenant bigint;
     query text;
begin
     IF value IS NOT NULL THEN
          query:=format('SELECT tenant_id FROM %I WHERE id = %s', table_name, value);
          execute query into valid_tenant;
     END IF;
     return valid_tenant;
end;
$body$
     LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE add_tenant_isolation_with_FK(table_name text, fks fk_type[])
     LANGUAGE plpgsql AS
$proc$
DECLARE
     buffer TEXT;
     fk fk_type;
begin
     buffer := 'CREATE POLICY tenant_isolation_policy'
                    || ' ON %I'
                    || ' USING'
                    || ' (tenant_id = get_current_tenant_id())'
                    || ' WITH CHECK '
          || ' ((tenant_id = get_current_tenant_id())';

     FOREACH fk IN array fks
          LOOP
             IF(fk.is_null) THEN
                  buffer := buffer || format(' AND (%1$I.%3$I IS NULL OR %1$I.tenant_id = get_owner_tenant_id(''%2$I'', %1$I.%3$I))', table_name, fk.table_name, fk.column_name);
             ELSE
                  buffer := buffer || format(' AND (%1$I.tenant_id = get_owner_tenant_id(''%2$I'', %1$I.%3$I))', table_name, fk.table_name, fk.column_name);
             end IF;
          END LOOP;
     buffer := buffer || ')';

     EXECUTE format(buffer, table_name);
     EXECUTE format('ALTER TABLE %I ENABLE ROW LEVEL SECURITY;', table_name);
END
$proc$;
-- end::fk_tenant_isolation[]
